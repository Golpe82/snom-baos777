# Generated by Django 4.1.7 on 2023-07-12 12:03

import django.core.validators
from django.db import migrations, models

def _create_settings_if_not_extist(apps, schema_editor):
    Setting = apps.get_model("knx", "Setting")
    setting = Setting(baos777_ip_address="0.0.0.0")
    setting.save()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('knx', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AmbientLightRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_address', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Invalid MAC address', regex='^[0-9a-fA-F]{12}$')], verbose_name='MAC address')),
                ('ip_address', models.GenericIPAddressField()),
                ('phone_model', models.CharField(choices=[('D735', 'D735')], max_length=4, null=True)),
                ('knx_send_lux_address', models.CharField(max_length=8, null=True)),
                ('lux_delta', models.FloatField(default=10)),
                ('knx_switch_address', models.CharField(max_length=8, null=True)),
                ('min_lux', models.PositiveSmallIntegerField(default=100)),
                ('max_lux', models.PositiveSmallIntegerField(default=500)),
                ('knx_dimm_address', models.CharField(max_length=8, null=True)),
                ('knx_dimm_status_address', models.CharField(max_length=8, null=True)),
                ('phone_location', models.CharField(default=None, max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FunctionKeyLEDBoolRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_address', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Invalid MAC address', regex='^[0-9a-fA-F]{12}$')], verbose_name='MAC address')),
                ('ip_address', models.GenericIPAddressField()),
                ('phone_model', models.CharField(choices=[('D335', 'D335'), ('D385', 'D385'), ('D713', 'D713'), ('D717', 'D717'), ('D735', 'D735'), ('D785', 'D785'), ('D862', 'D862'), ('D865', 'D865')], max_length=4, null=True)),
                ('write_groupaddress', models.CharField(max_length=8, null=True)),
                ('status_groupaddress', models.CharField(max_length=8, null=True)),
                ('led_number', models.PositiveSmallIntegerField(null=True)),
                ('led_color_for_on', models.CharField(choices=[('---', '---'), ('green', 'green'), ('red', 'red'), ('orange', 'orange')], max_length=8, null=True)),
                ('led_color_for_off', models.CharField(choices=[('---', '---'), ('green', 'green'), ('red', 'red'), ('orange', 'orange')], default='---', max_length=8, null=True)),
                ('phone_location', models.CharField(default=None, max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Groupaddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maingroup', models.CharField(default=None, editable=False, max_length=50)),
                ('subgroup', models.CharField(default=None, editable=False, max_length=50)),
                ('address', models.CharField(default=None, editable=False, max_length=9)),
                ('name', models.CharField(default=None, editable=False, max_length=50)),
                ('alias', models.CharField(default=None, max_length=50)),
                ('datapoint_type', models.CharField(default=None, editable=False, max_length=50)),
                ('html_action', models.CharField(default=None, max_length=500)),
                ('code', models.CharField(blank=True, max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baos777_ip_address', models.GenericIPAddressField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supbrocess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.PositiveIntegerField(default=None, unique=True)),
                ('type', models.CharField(default=None, editable=False, max_length=10)),
                ('name', models.CharField(default=None, editable=False, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TemperatureRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_address', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Invalid MAC address', regex='^[0-9a-fA-F]{12}$')], verbose_name='MAC address')),
                ('ip_address', models.GenericIPAddressField()),
                ('phone_model', models.CharField(choices=[('D335', 'D335'), ('D385', 'D385'), ('D713', 'D713'), ('D717', 'D717'), ('D735', 'D735'), ('D785', 'D785'), ('D862', 'D862'), ('D865', 'D865')], max_length=4, null=True)),
                ('knx_send_celsius_address', models.CharField(max_length=8, null=True)),
                ('celsius_delta', models.FloatField(default=1)),
                ('phone_location', models.CharField(default=None, max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.RunPython(_create_settings_if_not_extist),
    ]
